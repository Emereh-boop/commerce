// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (title, default_domain, favicon_url, currency_code, about)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, default_domain, favicon_url, currency_code, about, updated_at, created_at, owner_id, status, seo_description, seo_keywords, seo_title
`

type CreateShopParams struct {
	Title         string
	DefaultDomain string
	FaviconUrl    pgtype.Text
	CurrencyCode  string
	About         pgtype.Text
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, createShop,
		arg.Title,
		arg.DefaultDomain,
		arg.FaviconUrl,
		arg.CurrencyCode,
		arg.About,
	)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.About,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.OwnerID,
		&i.Status,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
	)
	return i, err
}

const getShop = `-- name: GetShop :one
SELECT id, title, default_domain, favicon_url, currency_code, about, updated_at, created_at, owner_id, status, seo_description, seo_keywords, seo_title FROM shops
WHERE id = $1
`

func (q *Queries) GetShop(ctx context.Context, id pgtype.UUID) (Shop, error) {
	row := q.db.QueryRow(ctx, getShop, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.About,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.OwnerID,
		&i.Status,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
	)
	return i, err
}

const getShopsByOwner = `-- name: GetShopsByOwner :many
SELECT id, title, default_domain, favicon_url, currency_code, about, updated_at, created_at, owner_id, status, seo_description, seo_keywords, seo_title FROM shops
WHERE owner_id = $1
`

func (q *Queries) GetShopsByOwner(ctx context.Context, ownerID pgtype.UUID) ([]Shop, error) {
	rows, err := q.db.Query(ctx, getShopsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.DefaultDomain,
			&i.FaviconUrl,
			&i.CurrencyCode,
			&i.About,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.OwnerID,
			&i.Status,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
