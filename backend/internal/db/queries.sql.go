// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (owner_id, title, default_domain, favicon_url, currency_code, about, status)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING shop_id, owner_id, title, default_domain, favicon_url, currency_code, status, about, seo_description, seo_keywords, seo_title, updated_at, created_at
`

type CreateShopParams struct {
	OwnerID       uuid.UUID
	Title         string
	DefaultDomain string
	FaviconUrl    pgtype.Text
	CurrencyCode  string
	About         pgtype.Text
	Status        string
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, createShop,
		arg.OwnerID,
		arg.Title,
		arg.DefaultDomain,
		arg.FaviconUrl,
		arg.CurrencyCode,
		arg.About,
		arg.Status,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE shop_id = $1
`

func (q *Queries) DeleteShop(ctx context.Context, shopID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteShop, shopID)
	return err
}

const getShop = `-- name: GetShop :one
SELECT shop_id, owner_id, title, default_domain, favicon_url, currency_code, status, about, seo_description, seo_keywords, seo_title, updated_at, created_at FROM shops
WHERE shop_id = $1
`

func (q *Queries) GetShop(ctx context.Context, shopID uuid.UUID) (Shop, error) {
	row := q.db.QueryRow(ctx, getShop, shopID)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShopByDomain = `-- name: GetShopByDomain :one
SELECT shop_id, owner_id, title, default_domain, favicon_url, currency_code, status, about, seo_description, seo_keywords, seo_title, updated_at, created_at FROM shops
WHERE default_domain = $1
`

func (q *Queries) GetShopByDomain(ctx context.Context, defaultDomain string) (Shop, error) {
	row := q.db.QueryRow(ctx, getShopByDomain, defaultDomain)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getShopsByOwner = `-- name: GetShopsByOwner :many
SELECT shop_id, owner_id, title, default_domain, favicon_url, currency_code, status, about, seo_description, seo_keywords, seo_title, updated_at, created_at FROM shops
WHERE owner_id = $1
`

func (q *Queries) GetShopsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Shop, error) {
	rows, err := q.db.Query(ctx, getShopsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ShopID,
			&i.OwnerID,
			&i.Title,
			&i.DefaultDomain,
			&i.FaviconUrl,
			&i.CurrencyCode,
			&i.Status,
			&i.About,
			&i.SeoDescription,
			&i.SeoKeywords,
			&i.SeoTitle,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT user_id, auth0_sub, email, name, profile_picture_url, created_at, last_login FROM users
WHERE auth0_sub = $1
`

func (q *Queries) GetUser(ctx context.Context, auth0Sub pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUser, auth0Sub)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Auth0Sub,
		&i.Email,
		&i.Name,
		&i.ProfilePictureUrl,
		&i.CreatedAt,
		&i.LastLogin,
	)
	return i, err
}

const getWhatsappsByShop = `-- name: GetWhatsappsByShop :many
SELECT whatsapp_id, shop_id, number, country_code, url, created_at FROM whatsapps
WHERE shop_id = $1
`

func (q *Queries) GetWhatsappsByShop(ctx context.Context, shopID uuid.UUID) ([]Whatsapp, error) {
	rows, err := q.db.Query(ctx, getWhatsappsByShop, shopID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Whatsapp
	for rows.Next() {
		var i Whatsapp
		if err := rows.Scan(
			&i.WhatsappID,
			&i.ShopID,
			&i.Number,
			&i.CountryCode,
			&i.Url,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :one
UPDATE shops
SET title = $2, favicon_url = $3, currency_code = $4, about = $5, status = $6
WHERE default_domain = $1
RETURNING shop_id, owner_id, title, default_domain, favicon_url, currency_code, status, about, seo_description, seo_keywords, seo_title, updated_at, created_at
`

type UpdateShopParams struct {
	DefaultDomain string
	Title         string
	FaviconUrl    pgtype.Text
	CurrencyCode  string
	About         pgtype.Text
	Status        string
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (Shop, error) {
	row := q.db.QueryRow(ctx, updateShop,
		arg.DefaultDomain,
		arg.Title,
		arg.FaviconUrl,
		arg.CurrencyCode,
		arg.About,
		arg.Status,
	)
	var i Shop
	err := row.Scan(
		&i.ShopID,
		&i.OwnerID,
		&i.Title,
		&i.DefaultDomain,
		&i.FaviconUrl,
		&i.CurrencyCode,
		&i.Status,
		&i.About,
		&i.SeoDescription,
		&i.SeoKeywords,
		&i.SeoTitle,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const upsertUser = `-- name: UpsertUser :one
INSERT INTO users (auth0_sub, email, name, profile_picture_url)
VALUES ($1, $2, $3, $4)
ON CONFLICT (auth0_sub)
DO UPDATE SET email = EXCLUDED.email, name = EXCLUDED.name, profile_picture_url = EXCLUDED.profile_picture_url
RETURNING user_id, auth0_sub, email, name, profile_picture_url
`

type UpsertUserParams struct {
	Auth0Sub          pgtype.Text
	Email             string
	Name              pgtype.Text
	ProfilePictureUrl pgtype.Text
}

type UpsertUserRow struct {
	UserID            uuid.UUID
	Auth0Sub          pgtype.Text
	Email             string
	Name              pgtype.Text
	ProfilePictureUrl pgtype.Text
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) (UpsertUserRow, error) {
	row := q.db.QueryRow(ctx, upsertUser,
		arg.Auth0Sub,
		arg.Email,
		arg.Name,
		arg.ProfilePictureUrl,
	)
	var i UpsertUserRow
	err := row.Scan(
		&i.UserID,
		&i.Auth0Sub,
		&i.Email,
		&i.Name,
		&i.ProfilePictureUrl,
	)
	return i, err
}
