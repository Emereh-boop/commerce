package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"

	"github.com/gosimple/slug"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/petrejonn/naytife/internal/db"
	"github.com/petrejonn/naytife/internal/graph/model"
)

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, category model.CreateCategoryInput) (*model.CreateCategoryPayload, error) {
	host, ok := ctx.Value("shopHost").(string)
	if !ok {
		return nil, errors.New("host not found")
	}
	shop, err := r.Repository.GetShopByDomain(ctx, host)
	if err != nil {
		return nil, errors.New("could not find shop")
	}
	param := db.CreateShopCategoryParams{
		Title:       category.Title,
		Description: pgtype.Text{String: category.Description, Valid: true},
		Slug:        slug.MakeLang(category.Title, "en"),
		ShopID:      shop.ShopID,
	}
	if category.ParentID != nil {
		_, id, err := fromGlobalID(*category.ParentID)
		if err != nil {
			return nil, errors.New("could not find parent category")
		}
		param.ParentID = pgtype.Int8{Int64: *id, Valid: true}
	}
	cat, err := r.Repository.CreateShopCategory(ctx, param)
	if err != nil {
		return nil, err
	}
	return &model.CreateCategoryPayload{
		Successful: true,
		Category: &model.Category{
			ID:                toGlobalID("Category", cat.CategoryID),
			Slug:              cat.Slug,
			Title:             cat.Title,
			Description:       cat.Description.String,
			Parent:            &model.Category{},
			Children:          []model.Category{},
			Products:          nil,
			Images:            nil,
			AllowedAttributes: nil,
			CreatedAt:         cat.CreatedAt.Time,
			UpdatedAt:         cat.UpdatedAt.Time,
		}}, nil
}

// UpdateCategory is the resolver for the updateCategory field.
func (r *mutationResolver) UpdateCategory(ctx context.Context, category model.UpdateCategoryInput) (*model.UpdateCategoryPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateCategory - updateCategory"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]model.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	_, catId, err := fromGlobalID(id)
	if err != nil {
		return nil, errors.New("invalid category ID")
	}
	cat, err := r.Repository.GetShopCategory(ctx, *catId)
	if err != nil {
		return nil, errors.New("could not find category")
	}
	return &model.Category{
		ID:                toGlobalID("Category", cat.CategoryID),
		Slug:              cat.Slug,
		Title:             cat.Title,
		Description:       cat.Description.String,
		Parent:            &model.Category{},
		Children:          []model.Category{},
		Products:          nil,
		Images:            nil,
		AllowedAttributes: nil,
		CreatedAt:         cat.CreatedAt.Time,
		UpdatedAt:         cat.UpdatedAt.Time,
	}, nil
}
